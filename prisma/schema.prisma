// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String?
  name       String?
  created_at  DateTime @default(now())

  songs      Song[]
  playlists  Playlist[]
  favorites  Favorite[]
  accounts   Account[]
  emailVerified DateTime?
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Song {
  id         Int       @id @default(autoincrement())
  title      String
  artist     String?
  file       String?
  url        String?
  isUrl      Boolean   @default(false)
  created_at  DateTime @default(now())

  user       User      @relation(fields: [users_id], references: [id])
  users_id    Int

  favorites  Favorite[]
  playlists  PlaylistSong[]
}

model Favorite {
  id       Int    @id @default(autoincrement())
  
  user     User   @relation(fields: [users_id], references: [id])
  users_id  Int

  song     Song   @relation(fields: [songs_id], references: [id])
  songs_id  Int
}

model Playlist {
  id         Int       @id @default(autoincrement())
  name       String
  created_at  DateTime @default(now())

  user       User      @relation(fields: [users_id], references: [id])
  users_id    Int

  songs      PlaylistSong[]
}

model PlaylistSong {
  id           Int      @id @default(autoincrement())

  playlist     Playlist @relation(fields: [playlists_id], references: [id])
  playlists_id  Int

  song         Song     @relation(fields: [songs_id], references: [id])
  songs_id      Int
}
